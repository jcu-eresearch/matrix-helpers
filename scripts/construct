#!/usr/bin/env bash

# TODO:
# * Recache and/or open in browser
# * Upload to multiple asset_ids from one source file (if required?)
# * Save to Page Contents (with one section -- doesn't save?) -- but tells you it saved with a 200...
# * Potentially add saving of properties for Nested Content (bodycopy
#   divs), Asset Listings (see Image Gallery CCT), Design Customisations, CSS/JS File Folder, Folder,
#   CSS Design File, Metadata Schemas/Sections/Fields, Regular Expressions
# * Detect error if not locked/saved correctly...? And/or Detect errors ("message" table row notification)
# * Verbose/debug mode

# Start the timer
start=$SECONDS
counter=0

[[ $OSTYPE == "darwin"*  ]] && _IS_MAC=yes
SCRIPT_NAME='construct'
SCRIPT_PATH="$0"
BASE_URL=$MATRIX_ADMIN_URL
[ -z "$BASE_URL" ] && BASE_URL="https://www.jcu.edu.au/_admin"
debug=false
show_help=false
subcommand_args=()

_METADATA_ASSET_ID_ATTRIBUTE='asset_id'     # The key in the .yml for the asset ID
_METADATA_TYPE_ATTRIBUTE='type'             # The key in the .yml for the upload type
_METADATA_TYPE_DEFAULT='content'            # What we default to if the .yml file doesn't have a `type`


# Global functions
function echo_error {
  echo -e "\033[00;31m✘\033[00;39m  $1"
}

function echo_error_reason {
  echo -e "   \e[31m⁈\e[39m $(unescape_html "$1")"
}

function echo_success {
  echo -e "\033[00;32m✔︎\033[00;39m  $1"
}

function echo_warning {
  echo -e "\033[00;33m⚠︎\033[00;39m  $1"
}

function echo_warning_reason {
  echo -e "   \033[00;33m⚠︎\033[00;39m  $1"
}

function echo_warning_inline {
  echo -en "\033[00;33m⚠︎\033[00;39m  $1"
}

function echo_bold {
  echo -e "\033[00;1m$1 \033[00;0m"
}

function command_exists {
  command -v "$1" &> /dev/null
}

function unescape_html {
  echo "$1" | sed 's/&amp;/\&/g; s/\&lt;/</g; s/\&gt;/>/g; s/\&quot;/"/g; s/\&#39;/'"'"'/g'
}

function cleanup {
  if [ "$debug" = true ]; then
    # Don't cleanup for raw debugging
    echo_warning "Last raw request is available in $tmpfile"
  else
    # Cleanup temp file
    rm -f "$1"
  fi
}

function parse_subcommand_args {
  # Parses arguments passed to subcommands, setting the `subcommand_args`
  # global to the remaining unparsed arguments
  for arg in "$@"; do
    case $arg in
      --help)
        show_help=true
        shift # past argument with no value
        ;;
      --debug)
        debug=true
        shift # past argument with no value
        ;;
      *)
        # Unknown option
        subcommand_args+=("$arg")
        ;;
    esac
  done
}

function _get_hipo_url_from_file {
  grep -o '"http.*\?SQ_ACTION=hipo.*"' "$1" | cut -d \" -f 2
}

function _get_percentage_from_file {
  grep -m 1 -E -o '[0-9]{1,3}%' "$1"
}

function handle_hipo {
  # $1 is a human-readable description (eg "acquire locks")
  job_description="$1"
  hipo_next_url=$(_get_hipo_url_from_file "$tmpfile")

  # Only run HIPO if we're being asked to
  if [ "$hipo_next_url" ]; then
    local hipo_log_prefix="Running HIPO job to $job_description for asset $asset_id...   "
    local progress="  0%"

    echo_warning_inline "$hipo_log_prefix $progress"

    until [ -z "$hipo_next_url" ]; do
      if [ "$debug" = true ]; then
        echo
        echo_warning_reason "HIPO job now loading $hipo_next_url"
        echo_warning_inline "$hipo_log_prefix $progress"
      fi

      response_code=$(curl "$hipo_next_url" \
        --silent \
        --output "$tmpfile" \
        --write-out "%{http_code}" \
        --cookie "SQ_SYSTEM_SESSION=$SQ_SYSTEM_SESSION")

      if [ "$response_code" -eq 200 ]; then
        # TODO Check for HIPO already running?
        # Display progress percentage from HIPO
        echo -en "\b\b\b\b\b"
        progress=$(printf '%4s' "$(_get_percentage_from_file "$tmpfile")")
        echo -n "$progress"

        # Prepare next URL for being loaded
        hipo_next_url=$(_get_hipo_url_from_file "$tmpfile")
      else
        echo_error "Execution of HIPO job failed for asset $asset_id. ($response_code)"
        cleanup "$tmpfile"
        return 1
      fi
    done

    echo -en "\033[1K\r" # Clear the line and go back to start
    echo_success "Successfully ran HIPO job to $job_description for asset $asset_id."

    # Load the original asset's admin page so we can continue normally
    response_code=$(curl "$matrix_url" \
      --silent \
      --output "$tmpfile" \
      --write-out "%{http_code}" \
      --cookie "SQ_SYSTEM_SESSION=$SQ_SYSTEM_SESSION")
  fi
}

function help {
  echo_bold "$SCRIPT_NAME Usage:"
  echo
  echo "  $SCRIPT_NAME [FILE_PATH...]          (defaults to upload)"
  echo "  $SCRIPT_NAME upload [FILE_PATH...]"
  echo "  $SCRIPT_NAME watch [FILE_PATH...]"
  echo "  $SCRIPT_NAME install-deps"
  echo "  $SCRIPT_NAME help"
  echo
  echo "This is the Construct. It is our loading program. We can load"
  echo "anything from CSS, to HTML, JavaScript, immages, anything we"
  echo "need.   ~ Morpheus (v2)"
}

function upload {
  parse_subcommand_args "$@"

  if [ $# -eq 0 ] || [ "$show_help" = true ]; then
    echo_bold "$SCRIPT_NAME upload PATH [PATH...] [--debug]"
    echo "    Upload the specified file path(s) to Matrix."
    echo
    echo "    We look for the corresponding asset IDs via a YAML file"
    echo "    with the same name (plus '.yml') as the file.  For instance"
    echo "    'content.html.yml' corresponds to a file named 'content.html'."
    echo
    echo "This script requires Backend User access.  It will not work for Simple Edit users."
    echo "Create a .env file in your matrix-helpers/ folder with the contents like:"
    echo
    echo "    export SQ_SYSTEM_SESSION="
    echo "    export SQ_CSRF_TOKEN="
    echo "    export MATRIX_ADMIN_URL=https://example.org/_admin"
    echo
    echo "You need to login to Squiz and retrieve your SQ_SYSTEM_SESSION cookie via your browser"
    echo "(we can't get it any other way) and get your SQ_CSRF_TOKEN via the URL:"
    echo
    echo '    https://www.jcu.edu.au/_admin/?SQ_ACTION=getToken'
    echo
    echo 'For Page or any other assets with `Page Contents`, you must target the Bodycopy Div asset ID specifically.'
    echo 'This reason for this is that we can only operate on one chunk at a time and `Page Contents` views operate'
    echo 'on multiple chunks simultaneously.'
    echo
    echo 'MATRIX_ADMIN_URL can be set to any Matrix instance. By default, we are set to JCU.'
    exit 0
  fi

  if [ -z "$SQ_CSRF_TOKEN" ] || [ -z "$SQ_SYSTEM_SESSION" ]; then
    echo "No security data found. Set \$SQ_CSRF_TOKEN and \$SQ_SYSTEM_SESSION. Exiting."
    exit 1
  fi

  for file in "${subcommand_args[@]}"; do

    echo "Processing $file:"

    if ! [ -f "$file" ]; then
      echo_error "File not found: $file"
      echo
      continue
    fi

    # Test that an asset ID can be found in the associated metadata file
    metadata_file="$file.yml"
    if [ -f "$metadata_file" ]; then
      asset_id=$(shyaml get-value "$_METADATA_ASSET_ID_ATTRIBUTE" < "$metadata_file" 2> /dev/null)

      if [ -z "$asset_id" ]; then
        echo_error "asset_id key is missing from $metadata_file"
        continue
      fi
    else
      echo_error "No metadata file found; create one at $metadata_file"
      echo
      continue
    fi

    asset_type=$(shyaml get-value "$_METADATA_TYPE_ATTRIBUTE" "$_METADATA_TYPE_DEFAULT" < "$metadata_file" 2> /dev/null)

    if [ "$asset_type" == "$_METADATA_TYPE_DEFAULT" ]; then
      # Bodycopy Div
      screen_type='contents'      # Which screen to load (inspect the frame URL)
      lock_type='content'         # Type of Matrix locks to acquire (inspect the POST request)
      field_type='textarea'       # Where to get the field name to upload (inspect the frame's HTML)
    elif [ "$asset_type" == "file" ]; then
      # File assets (File, CSS File, JS File, Image, ...)
      screen_type='details'
      lock_type='attr_links'
      field_type="input_file"
    elif [ "$asset_type" == "text_file" ]; then
      # File assets editable as text (CSS File, JS File, ...)
      screen_type='edit_file'
      lock_type='attributes'
      field_type='textarea'
    elif [ "$asset_type" == "parse_file" ]; then
      # Design assets (Design, CSS Design File, ...)
      screen_type='details'
      lock_type='parsing'
      field_type="input_file"
    else
      echo_error "Unknown type \"$asset_type\", cannot continue."
      echo
      continue
    fi

    # Backend administrator URL
    matrix_url="$BASE_URL/?SQ_BACKEND_PAGE=main&backend_section=am&am_section=edit_asset&assetid=$asset_id&asset_ei_screen=$screen_type"

    # Create temporary file for HTTP request data storage
    tmpfile=$(mktemp --tmpdir XXXXXXXXXXX.html)

    # Acquire locks
    response_code=$(curl "$matrix_url" \
      --silent \
      --output "$tmpfile" \
      --write-out "%{http_code}" \
      --cookie "SQ_SYSTEM_SESSION=$SQ_SYSTEM_SESSION" \
      --form "token=$SQ_CSRF_TOKEN" \
      --form "process_form=1" \
      --form "am_form_submitted=1" \
      --form "backend_assetid=$asset_id" \
      --form "asset_action=edit" \
      --form "sq_lock_acquire=1" \
      --form "sq_lock_acquire_by_force=0" \
      --form "sq_lock_type=$lock_type")

    # Handle HIPO when locking (is optional depending on asset type)
    handle_hipo "acquire locks"

    # Test to ensure that the locks are ours
    if [ "$response_code" -eq 200 ]; then
      # Check for false 200s
      if grep -q 'to release the locks you hold on' "$tmpfile"; then
        echo_success "Successfully acquired locks for asset $asset_id."
      else
        echo_error "Lock acquisition failed for asset $asset_id."

        # User-friendly error detection

        found_reason=false

        # TODO: this is brittle; Matrix seems to change its error format reporting...
        #       Eg for lines without HTML, use grep -o '.*\[SYS.*\]' "$tmpfile"
        # Look for [SYS...] error codes like this in the page's HTML:
        #     Asset #12345 does not exist [SYS0087]
        #     No Asset found for Id #12345 [SYS0195]
        while read -r reason; do
          echo_error_reason "$( echo "$reason" | xargs)"
          found_reason=true
        done < <(grep -E -o '>.*\[[A-Z]+[0-9]+\]' "$tmpfile" | sed 's/>//')

        # Look for "Held by user ... at .... The lock is due to expire in" text on a 200 page
        lock_debug=$(grep -m 1 'Held by user' "$tmpfile" | cut -d "<" -f 1 | xargs | sed 's/Held/Locked/')
        if [ "$lock_debug" ]; then
          echo_error_reason "$lock_debug"
          found_reason=true
        fi

        if [ "$found_reason" = false ]; then
          matrix_type=$(grep -o 'data-type-code=".*"' "$tmpfile" | cut -d \" -f 2)
          echo_error_reason "Check the asset type; is 'type: $asset_type' appropriate for a $matrix_type asset?"
        fi

        cleanup "$tmpfile"
        continue
      fi
    elif [ "$response_code" -eq 403 ]; then
      echo_error_reason "Invalid login credentials. Check your environment variables or server URL. ($response_code)"
    else
      echo_error "Lock acquisition failed for asset $asset_id. ($response_code)"
      cleanup "$tmpfile"
      continue
    fi

    # Get the field name from the HTML:
    #   <textarea name="bodycopy_div_393564_content_type_raw_html_864657_html"  [...]
    #   <textarea name="js_file_391595_new_file"  [...]
    # *Here be dragons*: we hope that the first field on the page is the one we want

    # TODO: need to be flexible enough to deal with:
    #   <textarea id="bodycopy_div_364549_content_type_wysiwyg_802610_contents_div_viper_input" style="display:none;" name="bodycopy_div_364549_content_type_wysiwyg_802610_contents_div_viper_input"
    if [ "$field_type" == "textarea" ]; then
      fieldname=$(grep -m 1 -o -E '<textarea.*?name=".*?"' "$tmpfile" | cut -d \" -f 2)
    elif [ "$field_type" == "input_file" ]; then
      fieldname=$(grep -m 1 -o -E '<input type="file" name=".*?"' "$tmpfile" | cut -d \" -f 4)
    fi

    if [ -z "$fieldname" ]; then
      echo_error "Could not locate a suitable field for asset $asset_id; check the YAML file or else this asset type isn't supported."
      cleanup "$tmpfile"
      continue
    fi

    # Send content in different manners depending on field type
    if [ "$field_type" == "textarea" ]; then
      response_code=$(curl "$matrix_url" \
        --silent \
        --output "$tmpfile" \
        --cookie "SQ_SYSTEM_SESSION=$SQ_SYSTEM_SESSION" \
        --form "token=$SQ_CSRF_TOKEN" \
        --form "process_form=1" \
        --form "am_form_submitted=1" \
        --form "backend_assetid=$asset_id" \
        --form "asset_action=edit" \
        --form "$fieldname=<$file" \
        --write-out "%{http_code}")
    elif [ "$field_type" == "input_file" ]; then
      filename=$(basename "$file")
      # field_12345_server_file= is a mandatory blank field to validate save
      response_code=$(curl "$matrix_url" \
        --silent \
        --output "$tmpfile" \
        --write-out "%{http_code}" \
        --cookie "SQ_SYSTEM_SESSION=$SQ_SYSTEM_SESSION" \
        --form "token=$SQ_CSRF_TOKEN" \
        --form "process_form=1" \
        --form "am_form_submitted=1" \
        --form "backend_assetid=$asset_id" \
        --form "asset_action=edit" \
        --form "$fieldname=@\"$file\"; filename=\"$filename\"" \
        --form "$fieldname""_server_file=")
    fi

    # Test to ensure that the content saved correctly
    # TODO Handle incorrect 200 responses
    if [ "$response_code" -eq 200 ]; then
      echo_success "Successfully uploaded content to asset $asset_id ($asset_type)."
    else
      echo_error "Content upload failed for asset $asset_id. ($response_code)"
      cleanup "$tmpfile"
      continue
    fi

    # Handle HIPO after uploading/saving content
    handle_hipo "post-process upload"

    # Release locks
    curl "$matrix_url" \
      --silent \
      --cookie "SQ_SYSTEM_SESSION=$SQ_SYSTEM_SESSION" \
      --form "token=$SQ_CSRF_TOKEN" \
      --form "process_form=1" \
      --form "am_form_submitted=1" \
      --form "backend_assetid=$asset_id" \
      --form "asset_action=edit" \
      --form "sq_lock_release_manual=1" \
      --form "sq_lock_type=$lock_type" > "$tmpfile"

    # Test to ensure that the locks were released
    if grep -q 'button to lock' "$tmpfile"; then
      echo_success "Successfully released locks for asset $asset_id."
    else
      echo_success "Lock release failed for asset $asset_id."
      continue
    fi

    cleanup "$tmpfile"

    # Newline
    echo

    # Increase counter
    counter=$(( counter + 1 ))
  done

  if [ "$counter" -gt 0 ]; then
    # Average of around 100 seconds per upload (54, 107 ...)
    script_duration=$(( SECONDS - start ))
    copy_paste_duration=$(( counter * 100 ))
    seconds_diff=$(( copy_paste_duration - script_duration ))
    percent_diff=$(( (copy_paste_duration / script_duration - 1) * 100 ))
    echo "💖  You just saved $seconds_diff""s ($percent_diff""% faster) versus copy & paste! 💖"
  fi
}

function watch {
  parse_subcommand_args "$@"

  if [ "$show_help" = true ]; then
    echo_bold "$SCRIPT_NAME watch [PATH...] [--debug]"
    echo "    Watch the specified file paths to Matrix and upload"
    echo "    automatically on changes."
    echo
    echo "Omitting any path defaults to watching the current directory and its"
    echo "contents. We automatically exclude any hidden files and .yml "
    echo "metadata files."
    exit
  fi
  # Pass in arguments, run our script again with "upload" arg
  echo 'Starting filesystem watch (Control-C to quit)...'

  # If no arguments, then we use the current directory
  if [ "${#subcommand_args[@]}" -eq 0 ]; then
    subcommand_args+=('.')
  fi

  # pass all incoming paths via `find` and `grep` to filter, hand them to
  # `entr` to monitor and filter out `entr`'s "bash returned exit code 0" lines
  find "${subcommand_args[@]}" -type f -exec realpath {} + |
    grep -E -v '(/\.|yml$)' |
    entr -p -s "$SCRIPT_PATH upload \$0" |
    grep -v 'returned exit code 0'
}

function install-deps {
  if [ "$1" == "--help" ]; then
    echo_bold "$SCRIPT_NAME install-deps"
    echo "    Installs the dependencies for this script."
    exit 0
  fi
  if [ $_IS_MAC ]; then
    if ! command_exists brew; then
      echo 'This script requires Homebrew. Install via https://brew.sh and come back.'
      exit 1
    else
      cmd='brew install shyaml entr coreutils'
      echo "We are about to run this: "
      echo "    $cmd"
      read -p "Are you sure? [Y/n] " -r
      if [ -z "$REPLY" ] || [[ $REPLY =~ ^[Yy]$ ]]; then
        $cmd
      fi
    fi
  else
    echo 'You need to install `shyaml`, `entr` and `coreutils` (realpath) using your package manager.'
  fi
}

if [ $# -eq 0 ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
  # Show help first
  help
  exit 0
elif [[ $1 =~ ^(help|upload|watch|install-deps)$ ]]; then
  # Run the corresponding sub-command (^^ function above)
  "$@"
elif [ -f "$1" ]; then
  # Default to uploading by filename, if arg was a file that exists
  upload "$@"
else
  # Derp
  echo "Invalid subcommand $1" >&2
  exit 1
fi
